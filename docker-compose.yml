#version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: hrsn-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hrsn_analytics_dev}
      POSTGRES_USER: ${POSTGRES_USER:-hrsn_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-hrsn_password}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - hrsn-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hrsn_user} -d ${POSTGRES_DB:-hrsn_analytics_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: hrsn-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - hrsn-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hrsn-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-hrsn_user}:${POSTGRES_PASSWORD:-hrsn_password}@postgres:5432/${POSTGRES_DB:-hrsn_analytics_dev}
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379
      
      # Application Configuration
      NODE_ENV: production
      PORT: 5000
      
      # Session Configuration
      SESSION_SECRET: ${SESSION_SECRET:-your-super-secret-session-key-change-this}
      
      # Stripe Configuration (for payments)
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      
      # Email Configuration (SendGrid)
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@yourcompany.com}
      
      # Google Cloud Storage (for object storage)
      #GOOGLE_CLOUD_PROJECT_ID: ${GOOGLE_CLOUD_PROJECT_ID}
      #GOOGLE_CLOUD_STORAGE_BUCKET: ${GOOGLE_CLOUD_STORAGE_BUCKET}
      
      # OpenAI Configuration (for AI features)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Security Configuration
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      
      # File Upload Configuration
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-100MB}
      UPLOAD_DIR: /app/uploads
      
      # Report Generation Configuration
      PDF_GENERATION_TIMEOUT: ${PDF_GENERATION_TIMEOUT:-300000}
      
      # Logging Configuration
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
    ports:
      - "${APP_PORT:-5000}:5000"
    volumes:
      # Persistent file storage
      - uploads_data:/app/uploads
      - logs_data:/app/logs
      # Mount configuration files if needed
      - ./config:/app/config:ro
    networks:
      - hrsn-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:5000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: hrsn-nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
      - logs_data:/var/log/nginx
    networks:
      - hrsn-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local

networks:
  hrsn-network:
    driver: bridge