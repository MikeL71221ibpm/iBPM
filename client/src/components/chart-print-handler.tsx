// Chart Print Handler Component
// Handles printing charts with proper formatting and styling

import React, { useRef, useEffect } from 'react';
import html2canvas from 'html2canvas';
import { jsPDF } from 'jspdf';

interface ChartPrintHandlerProps {
  elementId: string;
  chartTitle: string;
  isPrinting: boolean;
  onPrintComplete: () => void;
  paperFormat?: 'letter' | 'a4' | 'a3';
  orientation?: 'portrait' | 'landscape';
  includeMetadata?: boolean;
}

export default function ChartPrintHandler({
  elementId,
  chartTitle,
  isPrinting,
  onPrintComplete,
  paperFormat = 'letter',
  orientation = 'landscape',
  includeMetadata = true
}: ChartPrintHandlerProps) {
  const printTimeoutRef = useRef<number | null>(null);
  
  // Handle print action
  useEffect(() => {
    if (isPrinting) {
      handlePrint();
    }
    
    return () => {
      if (printTimeoutRef.current) {
        window.clearTimeout(printTimeoutRef.current);
      }
    };
  }, [isPrinting, elementId]);
  
  // Convert element to PDF and print
  const handlePrint = async () => {
    try {
      const element = document.getElementById(elementId);
      
      if (!element) {
        console.error(`Element with ID ${elementId} not found`);
        onPrintComplete();
        return;
      }
      
      // Get paper dimensions
      let width = 11;
      let height = 8.5;
      
      if (paperFormat === 'a4') {
        width = 11.7;
        height = 8.3;
      } else if (paperFormat === 'a3') {
        width = 16.5;
        height = 11.7;
      }
      
      // Swap dimensions for portrait orientation
      if (orientation === 'portrait') {
        [width, height] = [height, width];
      }
      
      // Generate canvas from the element
      const canvas = await html2canvas(element, {
        scale: 2, // Higher scale for better quality
        useCORS: true,
        allowTaint: true,
        logging: false,
        backgroundColor: '#ffffff'
      });
      
      // Calculate aspect ratio
      const aspectRatio = canvas.width / canvas.height;
      
      // Create PDF with proper dimensions
      const pdf = new jsPDF({
        orientation: orientation,
        unit: 'in',
        format: [width, height]
      });
      
      // Add metadata if requested
      if (includeMetadata) {
        pdf.setProperties({
          title: chartTitle,
          subject: 'Healthcare Analytics Chart',
          creator: 'HRSN Analytics Platform',
          author: 'Generated by HRSN Analytics',
          keywords: 'healthcare, analytics, chart',
          creationDate: new Date()
        });
      }
      
      // Add title
      pdf.setFontSize(16);
      pdf.text(chartTitle, 0.5, 0.5);
      
      // Calculate dimensions to fit the chart in the page with margins
      const pdfWidth = pdf.internal.pageSize.getWidth() - 1; // 0.5in margins on each side
      const pdfHeight = pdf.internal.pageSize.getHeight() - 1.2; // 0.5in margins on top/bottom + title space
      
      // Calculate dimensions to maintain aspect ratio
      let finalWidth = pdfWidth;
      let finalHeight = pdfWidth / aspectRatio;
      
      // If calculated height exceeds page height, recalculate based on height
      if (finalHeight > pdfHeight) {
        finalHeight = pdfHeight;
        finalWidth = pdfHeight * aspectRatio;
      }
      
      // Add canvas to PDF
      const imgData = canvas.toDataURL('image/png');
      pdf.addImage(imgData, 'PNG', 0.5, 0.7, finalWidth, finalHeight);
      
      // Open PDF in a new tab for printing
      const pdfBlob = pdf.output('blob');
      const pdfUrl = URL.createObjectURL(pdfBlob);
      const printWindow = window.open(pdfUrl, '_blank');
      
      if (printWindow) {
        // Trigger print dialog after the PDF is loaded
        printWindow.onload = () => {
          printWindow.print();
        };
      } else {
        // If popup blocked, offer direct download
        pdf.save(`${chartTitle.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`);
      }
      
      // Signal completion after a delay
      printTimeoutRef.current = window.setTimeout(() => {
        onPrintComplete();
      }, 500);
      
    } catch (error) {
      console.error('Print error:', error);
      onPrintComplete();
    }
  };
  
  // No visible UI, just handles the printing logic
  return null;
}