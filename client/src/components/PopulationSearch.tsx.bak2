import { useState, useEffect, useCallback } from "react";
import { useAppContext } from "@/context/AppContext";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { LineChart, Loader2 } from "lucide-react";
import { apiRequest } from "@/lib/queryClient";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import PopulationHealthCharts from "@/components/PopulationHealthCharts";

// Define types for the API response data
interface SymptomData {
  id: string;
  data: Array<{ x: string; y: number }>;
}

// Use a more generic type that matches BarDatum
interface HRSNData {
  hrsn: string;
  Total: number;
  color: string;
  [key: string]: any; // Use 'any' to ensure compatibility with Nivo's BarDatum
}

// Use a more generic type that matches BarDatum
interface DiagnosisHRSNData {
  diagnosis: string;
  "No HRSN Factors": number;
  "1 HRSN Factor": number;
  "2+ HRSN Factors": number;
  color: string;
  [key: string]: any; // Use 'any' to ensure compatibility with Nivo's BarDatum
}

export default function PopulationSearch() {
  const { searchConfig, updateSearchConfig, setCurrentData } = useAppContext();
  const [isRunningAnalysis, setIsRunningAnalysis] = useState(false);
  const [apiData, setApiData] = useState<any>(null);
  const [category, setCategory] = useState<"diagnosis" | "symptom" | "category" | "hrsn">("hrsn");
  const [visualizationTab, setVisualizationTab] = useState("visualization1");
  
  // Run analysis when the component mounts or when parameters change
  const runPopulationAnalysis = useCallback(async () => {
    if (!searchConfig) return;
    
    setIsRunningAnalysis(true);
    try {
      // Request specifically focuses on HRSN indicators
      const response = await apiRequest("POST", "/api/visualization-data", {
        searchType: "population",
        populationCategory: category,
        startDate: searchConfig.startDate,
        endDate: searchConfig.endDate,
        useAllDates: searchConfig.useAllDates,
        useCachedData: searchConfig.useCachedData,
        focusArea: "hrsn" // Specifically request HRSN indicators
      });
      
      const data = await response.json();
      setApiData(data);
      setCurrentData(data);
      console.log("Population analysis data:", data);
      return data;
    } catch (error) {
      console.error("Error running population analysis:", error);
    } finally {
      setIsRunningAnalysis(false);
    }
  }, [searchConfig, category, setCurrentData]);
  
  // Run analysis when user clicks the button
  const handleRunAnalysis = useCallback(() => {
    runPopulationAnalysis();
  }, [runPopulationAnalysis]);
  
  // Generate sample HRSN data for initial display
  // These will be replaced by actual API data when available
  const getSymptomHRSNHeatmapData = useCallback((): SymptomData[] => {
    // If we have API data, use it
    if (apiData?.symptomHrsnData) {
      return apiData.symptomHrsnData;
    }
    
    // Otherwise return sample data
    return [
      {
        id: "Major Depressive Disorder",
        data: [
          { x: "Housing Insecurity", y: 22 },
          { x: "Food Insecurity", y: 18 },
          { x: "Transportation Access", y: 12 },
          { x: "Financial Strain", y: 20 },
          { x: "Veteran Status", y: 7 }
        ]
      },
      {
        id: "Substance Use Disorder",
        data: [
          { x: "Housing Insecurity", y: 15 },
          { x: "Food Insecurity", y: 9 },
          { x: "Transportation Access", y: 11 },
          { x: "Financial Strain", y: 13 },
          { x: "Veteran Status", y: 5 }
        ]
      },
      {
        id: "Anxiety Disorder",
        data: [
          { x: "Housing Insecurity", y: 8 },
          { x: "Food Insecurity", y: 5 },
          { x: "Transportation Access", y: 4 },
          { x: "Financial Strain", y: 5 },
          { x: "Veteran Status", y: 3 }
        ]
      }
    ];
  }, [apiData]);
  
  // Generate HRSN distribution data
  const getHRSNDistributionData = useCallback((): HRSNData[] => {
    // If we have API data, use it
    if (apiData?.hrsnDistributionData) {
      return apiData.hrsnDistributionData;
    }
    
    // Otherwise return sample data
    return [
      {
        "hrsn": "Housing Insecurity",
        "Total": 45,
        "color": "hsl(21, 70%, 50%)"
      },
      {
        "hrsn": "Food Insecurity",
        "Total": 32,
        "color": "hsl(176, 70%, 50%)"
      },
      {
        "hrsn": "Transportation Access",
        "Total": 27,
        "color": "hsl(24, 70%, 50%)"
      },
      {
        "hrsn": "Financial Strain", 
        "Total": 38,
        "color": "hsl(10, 70%, 50%)"
      },
      {
        "hrsn": "Veteran Status",
        "Total": 15,
        "color": "hsl(40, 70%, 50%)"
      }
    ];
  }, [apiData]);
  
  // Generate diagnosis by HRSN count data
  const getDiagnosisByHRSNCountData = useCallback((): DiagnosisHRSNData[] => {
    // If we have API data, use it
    if (apiData?.diagnosisHrsnCountData) {
      return apiData.diagnosisHrsnCountData;
    }
    
    // Otherwise return sample data
    return [
      {
        "diagnosis": "Major Depressive Disorder",
        "No HRSN Factors": 10,
        "1 HRSN Factor": 18,
        "2+ HRSN Factors": 25,
        "color": "hsl(21, 70%, 50%)"
      },
      {
        "diagnosis": "Substance Use Disorder",
        "No HRSN Factors": 8,
        "1 HRSN Factor": 12,
        "2+ HRSN Factors": 30,
        "color": "hsl(176, 70%, 50%)"
      },
      {
        "diagnosis": "Anxiety Disorder",
        "No HRSN Factors": 15,
        "1 HRSN Factor": 10,
        "2+ HRSN Factors": 7,
        "color": "hsl(24, 70%, 50%)"
      }
    ];
  }, [apiData]);
  
  // Generate symptom distribution data
  const getSymptomDistributionData = useCallback((): SymptomData[] => {
    // If we have API data, use it
    if (apiData?.symptomDistributionData) {
      return apiData.symptomDistributionData;
    }
    
    // Otherwise return sample data
    return [
      {
        id: "Housing Insecurity Present",
        data: [
          { x: "Hopelessness", y: 12 },
          { x: "Loss of Trust", y: 9 },
          { x: "People Talk Down", y: 7 },
          { x: "Increased Tolerance", y: 11 },
          { x: "Increased Talkativeness", y: 6 }
        ]
      },
      {
        id: "Housing Insecurity Absent",
        data: [
          { x: "Hopelessness", y: 5 },
          { x: "Loss of Trust", y: 3 },
          { x: "People Talk Down", y: 2 },
          { x: "Increased Tolerance", y: 4 },
          { x: "Increased Talkativeness", y: 2 }
        ]
      }
    ];
  }, [apiData]);
  
  // Auto-run the analysis when searchConfig changes
  useEffect(() => {
    if (searchConfig) {
      console.log("Searching with params:", searchConfig);
      runPopulationAnalysis();
    }
  }, [searchConfig, runPopulationAnalysis]);
  
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Population Health Analysis - HRSN Indicators</CardTitle>
          <p className="text-sm text-gray-500">
            Analyze health disparities using Health-Related Social Needs (HRSN) indicators
          </p>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <Label htmlFor="category" className="text-sm font-medium text-neutral-700 mb-1 block">
                Focus Area
              </Label>
              <Select
                value={category}
                onValueChange={(value) => setCategory(value as "diagnosis" | "symptom" | "category" | "hrsn")}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select focus area" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="hrsn">Health-Related Social Needs (HRSN)</SelectItem>
                  <SelectItem value="diagnosis">Diagnosis</SelectItem>
                  <SelectItem value="symptom">Symptom</SelectItem>
                  <SelectItem value="category">Diagnostic Category</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="flex items-end">
              <Button 
                className="w-full bg-primary-600 hover:bg-primary-700"
                onClick={handleRunAnalysis}
                disabled={isRunningAnalysis}
              >
                {isRunningAnalysis ? (
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                ) : (
                  <LineChart className="w-4 h-4 mr-2" />
                )}
                {isRunningAnalysis ? "Running Analysis..." : "Update Analysis"}
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
      
      {isRunningAnalysis ? (
        <div className="bg-white shadow rounded-lg p-6 flex items-center justify-center min-h-[500px]">
          <div className="text-center">
            <Loader2 className="w-12 h-12 mx-auto animate-spin text-primary-600 mb-4" />
            <p className="text-lg font-medium text-gray-700">Analyzing population health data...</p>
            <p className="text-sm text-gray-500 mt-2">This may take a moment as we process HRSN indicators</p>
          </div>
        </div>
      ) : (
        <div className="bg-white shadow rounded-lg p-6">
          <h3 className="text-xl font-semibold mb-4">Population Health Analysis</h3>
          
          {/* Using the dedicated PopulationHealthCharts component */}
          <PopulationHealthCharts data={apiData} isLoading={isRunningAnalysis} />
        </div>
      )}
    </div>
  );
}